name: Build and Release

on:
  workflow_dispatch:
    inputs:
      versionBump:
        description: 'Type of version bump (major, minor, patch)'
        required: true
        default: 'patch'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64-unknown-linux-musl]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y perl make musl-tools musl-dev
          sudo update-ca-certificates

    #   - name: Set environment variables
    #     run: |
    #       echo "CC_aarch64_unknown_linux_musl=clang" >> $GITHUB_ENV
    #       echo "AR_aarch64_unknown_linux_musl=llvm-ar" >> $GITHUB_ENV
    #       echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_RUSTFLAGS=-Clink-self-contained=yes -Clinker=rust-lld -Clink-args=-L/usr/lib/x86_64-linux-musl/" >> $GITHUB_ENV

      - name: Check commit message
        id: check_message
        run: |
          COMMIT_MESSAGE=$(git log --format=%B -n 1)
          if [[ "$COMMIT_MESSAGE" != *"#major"* ]] && [[ "$COMMIT_MESSAGE" != *"#minor"* ]] && [[ "$COMMIT_MESSAGE" != *"#patch"* ]]; then
            echo "The latest commit message does not include a version bump keyword. Defaulting to patch version bump."
            echo "VERSION_BUMP=patch" >> $GITHUB_ENV
          else
            echo "VERSION_BUMP=${{ github.event.inputs.versionBump }}" >> $GITHUB_ENV
          fi
    
      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v5.6
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: ${{ env.VERSION_BUMP }}

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.target }}

      - name: Build binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: my-binary-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/my-binary

#   docker:
#     needs: build
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Download all artifacts
#         uses: actions/download-artifact@v2

#       - name: Build Docker image
#         uses: docker/build-push-action@v2
#         with:
#           context: .
#           file: ./Dockerfile
#           push: true
#           tags: user/app:${{ steps.tag_version.outputs.new_tag }}

  release:
    # needs: docker
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download all artifacts
        uses: actions/download-artifact@v2

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag_version.outputs.new_tag }}
          release_name: Release ${{ steps.tag_version.outputs.new_tag }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./my-binary-x86_64-unknown-linux-musl
          asset_name: my-binary-x86_64-unknown-linux-musl
          asset_content_type: application/octet-stream

      - name: Upload Release Asset
        id: upload-release-asset-2
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./my-binary-aarch64-unknown-linux-musl
          asset_name: my-binary-aarch64-unknown-linux-musl
          asset_content_type: application/octet-stream
